// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"errors"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"runtime"
	"strings"
)

func main() {
	type step struct {
		name string
		fn   func() error
	}

	var c collector

	steps := []step{
		{"init collector", c.init},
		{"locate test dir", c.locateTestDir},
		{"read extensions", c.readExtensions},
		{"parse command-line args", c.parseFlags},
		{"validate command-line args", c.validateFlags},
		{"prepare work dir", c.prepareWorkDir},
		{"visit work dir", c.visitWorkDir},
	}

	for _, s := range steps {
		if err := s.fn(); err != nil {
			log.Fatalf("%s: %v", s.name, err)
		}
	}
}

type collector struct {
	// memArgRE matches any kind of memory operand.
	// Displacement and indexing expressions are optional.
	memArgRE *regexp.Regexp

	// vmemArgRE is almost like memArgRE, but indexing expression is mandatory
	// and index register must be one of the X/Y/Z.
	vmemArgRE *regexp.Regexp

	// testDir is AVX-512 encoder end2end test suite path.
	testDir string

	// availableExt is a set of available testfiles for evaluation.
	availableExt map[string]bool

	// Fields below are initialized by command-line arguments (flags).

	extensions    []string
	perfTool      string
	workDir       string
	iformSpanSize uint
	loopCount     uint
	perfRounds    uint
	verbose       bool
}

func (c *collector) init() error {
	c.memArgRE = regexp.MustCompile(`(?:-?\d+)?\(\w+\)(?:\(\w+\*[1248]\))?`)
	c.vmemArgRE = regexp.MustCompile(`(?:-?\d+)?\(\w+\)\(([XYZ])\d+\*[1248]\)`)
	c.availableExt = make(map[string]bool)
	return nil
}

func (c *collector) locateTestDir() error {
	goroot := runtime.GOROOT()
	// The AVX-512 encoder end2end test suite path is unlikely to change.
	// If it ever does, this should be updated.
	c.testDir = filepath.Join(goroot,
		"src", "cmd", "asm", "internal", "asm", "testdata", "avx512enc")
	if !fileExists(c.testDir) {
		return fmt.Errorf("can't locate AVX-512 testdata: %s doesn't exist", c.testDir)
	}
	return nil
}

func (c *collector) readExtensions() error {
	files, err := ioutil.ReadDir(c.testDir)
	if err != nil {
		return err
	}

	for _, f := range files {
		ext := strings.TrimSuffix(f.Name(), ".s")
		c.availableExt[ext] = true
	}

	return nil
}

func (c *collector) parseFlags() error {
	extensions := flag.String("extensions", "avx512f,avx512dq,avx512cd,avx512bw",
		`comma-separated list of extensions to be evaluated`)
	flag.StringVar(&c.perfTool, "perf", "perf",
		`perf tool binary name. ocperf and other drop-in replacements will do`)
	flag.StringVar(&c.workDir, "workDir", "./avx512counters-workdir",
		`where to put results and the intermediate files`)
	flag.UintVar(&c.iformSpanSize, "iformSpanSize", 100,
		`how many instruction lines form a single iform span. Higher values slow down the collection`)
	flag.UintVar(&c.loopCount, "loopCount", 1*1000*1000,
		`how many times to execute every iform span. Higher values slow down the collection`)
	flag.UintVar(&c.perfRounds, "perfRounds", 1,
		`how many times to re-validate perf results. Higher values slow down the collection`)
	flag.BoolVar(&c.verbose, "verbose", true,
		`whether to print collection status`)

	flag.Parse()

	for _, ext := range strings.Split(*extensions, ",") {
		ext = strings.TrimSpace(ext)
		c.extensions = append(c.extensions, ext)
	}

	absWorkDir, err := filepath.Abs(c.workDir)
	if err != nil {
		return fmt.Errorf("expand -workDir: %v", err)
	}
	c.workDir = absWorkDir
	return nil
}

func (c *collector) validateFlags() error {
	for _, ext := range c.extensions {
		if !c.availableExt[ext] {
			return fmt.Errorf("unavailable extension: %q", ext)
		}
	}

	switch {
	case len(c.extensions) == 0:
		return errors.New("expected at least 1 extension name")
	case c.perfTool == "":
		return errors.New("argument -perf can't be empty")
	case c.iformSpanSize == 0:
		return errors.New("argument -iformSpanSize can't be 0")
	case c.loopCount == 0:
		return errors.New("argument -loopCount can't be 0")
	case c.perfRounds == 0:
		return errors.New("argument -perfRounds can't be 0")
	default:
		return nil
	}
}

func (c *collector) prepareWorkDir() error {
	if !fileExists(c.workDir) {
		if err := os.Mkdir(c.workDir, 0700); err != nil {
			return err
		}
	}

	// Always overwrite the main file, just in case.
	mainFile := filepath.Join(c.workDir, "main.go")
	mainFileContents := fmt.Sprintf(`
		// Code generated by avx512counters. DO NOT EDIT.
		package main
		func avx512routine(*[1024]byte)
		func main() {
			var memory [1024]byte
			for i := 0; i < %d; i++ {
				// Fill memory argument with some values.
				for i := range memory {
					memory[i] = byte(i)
				}
				avx512routine(&memory)
			}
		}`, c.loopCount)
	return ioutil.WriteFile(mainFile, []byte(mainFileContents), 0666)
}

func (c *collector) visitWorkDir() error {
	return os.Chdir(c.workDir)
}

// fileExists reports whether file with given name exists.
func fileExists(name string) bool {
	_, err := os.Stat(name)
	return !os.IsNotExist(err)
}
